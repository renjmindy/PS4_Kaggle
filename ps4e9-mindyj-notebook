{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76728,"databundleVersionId":9057646,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\npd.set_option('display.precision', 2)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-26T09:27:14.739390Z","iopub.execute_input":"2024-09-26T09:27:14.739785Z","iopub.status.idle":"2024-09-26T09:27:15.122431Z","shell.execute_reply.started":"2024-09-26T09:27:14.739747Z","shell.execute_reply":"2024-09-26T09:27:15.121480Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e9/sample_submission.csv\n/kaggle/input/playground-series-s4e9/train.csv\n/kaggle/input/playground-series-s4e9/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Load Python Pakages","metadata":{}},{"cell_type":"code","source":"#basics\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport time\nimport matplotlib.pyplot as plt\nimport missingno as msno\nfrom sklearn.base import clone\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#preprocessing\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer, quantile_transform\n\n#statistics\nfrom scipy.stats import randint, mode\n\n#feature engineering\nfrom sklearn.feature_selection import mutual_info_classif\n\n#transformers and pipeline\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline, make_pipeline, FeatureUnion\nfrom sklearn import set_config\n\n#feature engineering\nfrom sklearn.feature_selection import mutual_info_classif\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.feature_selection import RFECV\n\n#algorithms\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier, Pool, CatBoostRegressor\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nfrom lightgbm.callback import early_stopping, log_evaluation\nfrom sklearn.linear_model import LogisticRegression\n\n#model evaluation\nfrom sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.model_selection import StratifiedShuffleSplit, StratifiedKFold\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import roc_auc_score, log_loss, auc, accuracy_score, balanced_accuracy_score\nfrom sklearn.metrics import mean_squared_error, make_scorer, RocCurveDisplay, confusion_matrix\n\n#model evaluation\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_curve, confusion_matrix, matthews_corrcoef, make_scorer\n\n# Optuna and visualization tools\nimport optuna\nUSE_OPTUNA = False\nfrom optuna.samplers import TPESampler\nfrom optuna.visualization import plot_contour\nfrom optuna.visualization import plot_edf\nfrom optuna.visualization import plot_intermediate_values\nfrom optuna.visualization import plot_optimization_history\nfrom optuna.visualization import plot_parallel_coordinate\nfrom optuna.visualization import plot_param_importances\nfrom optuna.visualization import plot_slice\n\nrandom_state = 42","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:15.124522Z","iopub.execute_input":"2024-09-26T09:27:15.125366Z","iopub.status.idle":"2024-09-26T09:27:22.173979Z","shell.execute_reply.started":"2024-09-26T09:27:15.125319Z","shell.execute_reply":"2024-09-26T09:27:22.173148Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"!python /kaggle/usr/lib/lgbm_cat/lgbm_cat.py ","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:22.175062Z","iopub.execute_input":"2024-09-26T09:27:22.175667Z","iopub.status.idle":"2024-09-26T09:27:23.279099Z","shell.execute_reply.started":"2024-09-26T09:27:22.175630Z","shell.execute_reply":"2024-09-26T09:27:23.277844Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"python: can't open file '/kaggle/usr/lib/lgbm_cat/lgbm_cat.py': [Errno 2] No such file or directory\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Lets look into data","metadata":{}},{"cell_type":"markdown","source":"### Check for missing values","metadata":{}},{"cell_type":"code","source":"# Read the data\nsample_sub = pd.read_csv('/kaggle/input/playground-series-s4e9/sample_submission.csv')\ntrain_df = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv', index_col=[0])\ntest_df = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv', index_col=[0])\n\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:23.283289Z","iopub.execute_input":"2024-09-26T09:27:23.283701Z","iopub.status.idle":"2024-09-26T09:27:24.826787Z","shell.execute_reply.started":"2024-09-26T09:27:23.283665Z","shell.execute_reply":"2024-09-26T09:27:24.825758Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"            brand              model  model_year  milage      fuel_type  \\\nid                                                                        \n0            MINI      Cooper S Base        2007  213000       Gasoline   \n1         Lincoln              LS V8        2002  143250       Gasoline   \n2       Chevrolet  Silverado 2500 LT        2002  136731  E85 Flex Fuel   \n3         Genesis   G90 5.0 Ultimate        2017   19500       Gasoline   \n4   Mercedes-Benz        Metris Base        2021    7388       Gasoline   \n\n                                               engine  \\\nid                                                      \n0        172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel   \n1        252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel   \n2   320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...   \n3        420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel   \n4        208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n\n                      transmission ext_col int_col  \\\nid                                                   \n0                              A/T  Yellow    Gray   \n1                              A/T  Silver   Beige   \n2                              A/T    Blue    Gray   \n3   Transmission w/Dual Shift Mode   Black   Black   \n4                      7-Speed A/T   Black   Beige   \n\n                                  accident clean_title  price  \nid                                                             \n0                            None reported         Yes   4200  \n1   At least 1 accident or damage reported         Yes   4999  \n2                            None reported         Yes  13900  \n3                            None reported         Yes  45000  \n4                            None reported         Yes  97500  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>MINI</td>\n      <td>Cooper S Base</td>\n      <td>2007</td>\n      <td>213000</td>\n      <td>Gasoline</td>\n      <td>172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Yellow</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>4200</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lincoln</td>\n      <td>LS V8</td>\n      <td>2002</td>\n      <td>143250</td>\n      <td>Gasoline</td>\n      <td>252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Silver</td>\n      <td>Beige</td>\n      <td>At least 1 accident or damage reported</td>\n      <td>Yes</td>\n      <td>4999</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chevrolet</td>\n      <td>Silverado 2500 LT</td>\n      <td>2002</td>\n      <td>136731</td>\n      <td>E85 Flex Fuel</td>\n      <td>320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...</td>\n      <td>A/T</td>\n      <td>Blue</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>13900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Genesis</td>\n      <td>G90 5.0 Ultimate</td>\n      <td>2017</td>\n      <td>19500</td>\n      <td>Gasoline</td>\n      <td>420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>45000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Mercedes-Benz</td>\n      <td>Metris Base</td>\n      <td>2021</td>\n      <td>7388</td>\n      <td>Gasoline</td>\n      <td>208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>Black</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>97500</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"%matplotlib inline\nmsno.matrix(train_df)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:24.828098Z","iopub.execute_input":"2024-09-26T09:27:24.828470Z","iopub.status.idle":"2024-09-26T09:27:26.344665Z","shell.execute_reply.started":"2024-09-26T09:27:24.828435Z","shell.execute_reply":"2024-09-26T09:27:26.343644Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2500x1000 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"%matplotlib inline\nmsno.matrix(test_df)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:26.345779Z","iopub.execute_input":"2024-09-26T09:27:26.346098Z","iopub.status.idle":"2024-09-26T09:27:27.508903Z","shell.execute_reply.started":"2024-09-26T09:27:26.346065Z","shell.execute_reply":"2024-09-26T09:27:27.507889Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2500x1000 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"missing = pd.DataFrame(train_df.isnull().sum().sort_values(ascending=False))\nmissing.columns = [\"missing_count\"]\nmissing = missing.loc[(missing!=0).any(axis=1)]\nmissing[\"missing_percent\"] = missing[0:] / len(train_df)*100\nmissing.style.background_gradient('viridis')","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:27.510240Z","iopub.execute_input":"2024-09-26T09:27:27.510553Z","iopub.status.idle":"2024-09-26T09:27:27.738238Z","shell.execute_reply.started":"2024-09-26T09:27:27.510518Z","shell.execute_reply":"2024-09-26T09:27:27.737289Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7fa853b3ac80>","text/html":"<style type=\"text/css\">\n#T_73dee_row0_col0, #T_73dee_row0_col1 {\n  background-color: #fde725;\n  color: #000000;\n}\n#T_73dee_row1_col0, #T_73dee_row1_col1 {\n  background-color: #46307e;\n  color: #f1f1f1;\n}\n#T_73dee_row2_col0, #T_73dee_row2_col1 {\n  background-color: #440154;\n  color: #f1f1f1;\n}\n</style>\n<table id=\"T_73dee\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_73dee_level0_col0\" class=\"col_heading level0 col0\" >missing_count</th>\n      <th id=\"T_73dee_level0_col1\" class=\"col_heading level0 col1\" >missing_percent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_73dee_level0_row0\" class=\"row_heading level0 row0\" >clean_title</th>\n      <td id=\"T_73dee_row0_col0\" class=\"data row0 col0\" >21419</td>\n      <td id=\"T_73dee_row0_col1\" class=\"data row0 col1\" >11.360876</td>\n    </tr>\n    <tr>\n      <th id=\"T_73dee_level0_row1\" class=\"row_heading level0 row1\" >fuel_type</th>\n      <td id=\"T_73dee_row1_col0\" class=\"data row1 col0\" >5083</td>\n      <td id=\"T_73dee_row1_col1\" class=\"data row1 col1\" >2.696080</td>\n    </tr>\n    <tr>\n      <th id=\"T_73dee_level0_row2\" class=\"row_heading level0 row2\" >accident</th>\n      <td id=\"T_73dee_row2_col0\" class=\"data row2 col0\" >2452</td>\n      <td id=\"T_73dee_row2_col1\" class=\"data row2 col1\" >1.300568</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"missing = pd.DataFrame(test_df.isnull().sum().sort_values(ascending=False))\nmissing.columns = [\"missing_count\"]\nmissing = missing.loc[(missing!=0).any(axis=1)]\nmissing[\"missing_percent\"] = missing[0:] / len(test_df)*100\nmissing.style.background_gradient('viridis')","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:27.739501Z","iopub.execute_input":"2024-09-26T09:27:27.739818Z","iopub.status.idle":"2024-09-26T09:27:27.857620Z","shell.execute_reply.started":"2024-09-26T09:27:27.739784Z","shell.execute_reply":"2024-09-26T09:27:27.856670Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7fa853b3b7f0>","text/html":"<style type=\"text/css\">\n#T_8ded6_row0_col0, #T_8ded6_row0_col1 {\n  background-color: #fde725;\n  color: #000000;\n}\n#T_8ded6_row1_col0, #T_8ded6_row1_col1 {\n  background-color: #46307e;\n  color: #f1f1f1;\n}\n#T_8ded6_row2_col0, #T_8ded6_row2_col1 {\n  background-color: #440154;\n  color: #f1f1f1;\n}\n</style>\n<table id=\"T_8ded6\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_8ded6_level0_col0\" class=\"col_heading level0 col0\" >missing_count</th>\n      <th id=\"T_8ded6_level0_col1\" class=\"col_heading level0 col1\" >missing_percent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_8ded6_level0_row0\" class=\"row_heading level0 row0\" >clean_title</th>\n      <td id=\"T_8ded6_row0_col0\" class=\"data row0 col0\" >14239</td>\n      <td id=\"T_8ded6_row0_col1\" class=\"data row0 col1\" >11.328666</td>\n    </tr>\n    <tr>\n      <th id=\"T_8ded6_level0_row1\" class=\"row_heading level0 row1\" >fuel_type</th>\n      <td id=\"T_8ded6_row1_col0\" class=\"data row1 col0\" >3383</td>\n      <td id=\"T_8ded6_row1_col1\" class=\"data row1 col1\" >2.691543</td>\n    </tr>\n    <tr>\n      <th id=\"T_8ded6_level0_row2\" class=\"row_heading level0 row2\" >accident</th>\n      <td id=\"T_8ded6_row2_col0\" class=\"data row2 col0\" >1632</td>\n      <td id=\"T_8ded6_row2_col1\" class=\"data row2 col1\" >1.298433</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"markdown","source":"### Descriptive statistics","metadata":{}},{"cell_type":"code","source":"#numerical feature descriptive statistics\n\ntrain_df.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:27.859091Z","iopub.execute_input":"2024-09-26T09:27:27.859545Z","iopub.status.idle":"2024-09-26T09:27:27.896854Z","shell.execute_reply.started":"2024-09-26T09:27:27.859496Z","shell.execute_reply":"2024-09-26T09:27:27.895945Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"               count      mean       std     min      25%      50%      75%  \\\nmodel_year  188533.0   2015.83      5.66  1974.0   2013.0   2017.0   2020.0   \nmilage      188533.0  65705.30  49798.16   100.0  24115.0  57785.0  95400.0   \nprice       188533.0  43878.02  78819.52  2000.0  17000.0  30825.0  49900.0   \n\n                 max  \nmodel_year  2.02e+03  \nmilage      4.05e+05  \nprice       2.95e+06  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>model_year</th>\n      <td>188533.0</td>\n      <td>2015.83</td>\n      <td>5.66</td>\n      <td>1974.0</td>\n      <td>2013.0</td>\n      <td>2017.0</td>\n      <td>2020.0</td>\n      <td>2.02e+03</td>\n    </tr>\n    <tr>\n      <th>milage</th>\n      <td>188533.0</td>\n      <td>65705.30</td>\n      <td>49798.16</td>\n      <td>100.0</td>\n      <td>24115.0</td>\n      <td>57785.0</td>\n      <td>95400.0</td>\n      <td>4.05e+05</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>188533.0</td>\n      <td>43878.02</td>\n      <td>78819.52</td>\n      <td>2000.0</td>\n      <td>17000.0</td>\n      <td>30825.0</td>\n      <td>49900.0</td>\n      <td>2.95e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Grouping features for preprocessing purposes","metadata":{}},{"cell_type":"code","source":"train_df.nunique().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:27.900420Z","iopub.execute_input":"2024-09-26T09:27:27.900822Z","iopub.status.idle":"2024-09-26T09:27:28.051117Z","shell.execute_reply.started":"2024-09-26T09:27:27.900773Z","shell.execute_reply":"2024-09-26T09:27:28.050162Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"clean_title        1\naccident           2\nfuel_type          7\nmodel_year        34\ntransmission      52\nbrand             57\nint_col          156\next_col          319\nengine          1117\nprice           1569\nmodel           1897\nmilage          6651\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.052229Z","iopub.execute_input":"2024-09-26T09:27:28.052519Z","iopub.status.idle":"2024-09-26T09:27:28.221431Z","shell.execute_reply.started":"2024-09-26T09:27:28.052486Z","shell.execute_reply":"2024-09-26T09:27:28.220444Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 188533 entries, 0 to 188532\nData columns (total 12 columns):\n #   Column        Non-Null Count   Dtype \n---  ------        --------------   ----- \n 0   brand         188533 non-null  object\n 1   model         188533 non-null  object\n 2   model_year    188533 non-null  int64 \n 3   milage        188533 non-null  int64 \n 4   fuel_type     183450 non-null  object\n 5   engine        188533 non-null  object\n 6   transmission  188533 non-null  object\n 7   ext_col       188533 non-null  object\n 8   int_col       188533 non-null  object\n 9   accident      186081 non-null  object\n 10  clean_title   167114 non-null  object\n 11  price         188533 non-null  int64 \ndtypes: int64(3), object(9)\nmemory usage: 18.7+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Exploratory Data Analysis¶","metadata":{}},{"cell_type":"code","source":"def extract_age_features(df, current_year=2024):\n\n    df['Vehicle_Age'] = (current_year - df['model_year']) + 1\n    \n    df['Mileage_per_Year'] = df['milage'] / df['Vehicle_Age']\n        \n    df['milage_with_age'] =  df.groupby('Vehicle_Age')['milage'].transform('mean')\n    \n    df['Mileage_per_Year_with_age'] =  df.groupby('Vehicle_Age')['Mileage_per_Year'].transform('mean')\n \n#     df['milage_brand'] =  df.groupby('brand')['milage'].transform('mean')\n    \n    \n    return df","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.222823Z","iopub.execute_input":"2024-09-26T09:27:28.223234Z","iopub.status.idle":"2024-09-26T09:27:28.229670Z","shell.execute_reply.started":"2024-09-26T09:27:28.223190Z","shell.execute_reply":"2024-09-26T09:27:28.228697Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"def extract_engine_features(df):\n    \n    def extract_horsepower(engine):\n        try:\n            return float(engine.split('HP')[0])\n        except:\n            return None\n\n    def extract_engine_size(engine):\n        try:\n            return float(engine.split(' ')[1].replace('L', ''))\n        except:\n            return None\n\n    df['Horsepower'] = df['engine'].apply(extract_horsepower)\n    df['Engine_Size'] = df['engine'].apply(extract_engine_size)\n    df['Power_to_Weight_Ratio'] = df['Horsepower'] / df['Engine_Size']\n    \n    return df","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.230915Z","iopub.execute_input":"2024-09-26T09:27:28.231281Z","iopub.status.idle":"2024-09-26T09:27:28.239657Z","shell.execute_reply.started":"2024-09-26T09:27:28.231247Z","shell.execute_reply":"2024-09-26T09:27:28.238776Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"def extract_other_features(df):\n    \n    luxury_brands =  ['Mercedes-Benz', 'BMW', 'Audi', 'Porsche', 'Land', \n                    'Lexus', 'Jaguar', 'Bentley', 'Maserati', 'Lamborghini', \n                    'Rolls-Royce', 'Ferrari', 'McLaren', 'Aston', 'Maybach']\n    df['Is_Luxury_Brand'] = df['brand'].apply(lambda x: 'Yes' if x in luxury_brands else 'No')\n    \n#    df['luxary_with_accident'] = df.apply(lambda row: 1 if row['Is_Luxury_Brand'] == 1  and row['accident'] == 'At least 1 accident or damage reported' else 0  ,  axis =1)\n    \n#     df.drop(columns = ['Is_Luxury_Brand'] , inplace=True)\n\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.240911Z","iopub.execute_input":"2024-09-26T09:27:28.241284Z","iopub.status.idle":"2024-09-26T09:27:28.248034Z","shell.execute_reply.started":"2024-09-26T09:27:28.241247Z","shell.execute_reply":"2024-09-26T09:27:28.247179Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"def transform_other_features(df):\n    \n    df['accident'] = df['accident'].apply(lambda x: 'No' if x == 'None reported' else 'Yes')\n\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.249151Z","iopub.execute_input":"2024-09-26T09:27:28.251045Z","iopub.status.idle":"2024-09-26T09:27:28.261489Z","shell.execute_reply.started":"2024-09-26T09:27:28.251002Z","shell.execute_reply":"2024-09-26T09:27:28.260763Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.262641Z","iopub.execute_input":"2024-09-26T09:27:28.263414Z","iopub.status.idle":"2024-09-26T09:27:28.282530Z","shell.execute_reply.started":"2024-09-26T09:27:28.263374Z","shell.execute_reply":"2024-09-26T09:27:28.281506Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"            brand              model  model_year  milage      fuel_type  \\\nid                                                                        \n0            MINI      Cooper S Base        2007  213000       Gasoline   \n1         Lincoln              LS V8        2002  143250       Gasoline   \n2       Chevrolet  Silverado 2500 LT        2002  136731  E85 Flex Fuel   \n3         Genesis   G90 5.0 Ultimate        2017   19500       Gasoline   \n4   Mercedes-Benz        Metris Base        2021    7388       Gasoline   \n\n                                               engine  \\\nid                                                      \n0        172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel   \n1        252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel   \n2   320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...   \n3        420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel   \n4        208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n\n                      transmission ext_col int_col  \\\nid                                                   \n0                              A/T  Yellow    Gray   \n1                              A/T  Silver   Beige   \n2                              A/T    Blue    Gray   \n3   Transmission w/Dual Shift Mode   Black   Black   \n4                      7-Speed A/T   Black   Beige   \n\n                                  accident clean_title  price  \nid                                                             \n0                            None reported         Yes   4200  \n1   At least 1 accident or damage reported         Yes   4999  \n2                            None reported         Yes  13900  \n3                            None reported         Yes  45000  \n4                            None reported         Yes  97500  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>MINI</td>\n      <td>Cooper S Base</td>\n      <td>2007</td>\n      <td>213000</td>\n      <td>Gasoline</td>\n      <td>172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Yellow</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>4200</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lincoln</td>\n      <td>LS V8</td>\n      <td>2002</td>\n      <td>143250</td>\n      <td>Gasoline</td>\n      <td>252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Silver</td>\n      <td>Beige</td>\n      <td>At least 1 accident or damage reported</td>\n      <td>Yes</td>\n      <td>4999</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chevrolet</td>\n      <td>Silverado 2500 LT</td>\n      <td>2002</td>\n      <td>136731</td>\n      <td>E85 Flex Fuel</td>\n      <td>320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...</td>\n      <td>A/T</td>\n      <td>Blue</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>13900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Genesis</td>\n      <td>G90 5.0 Ultimate</td>\n      <td>2017</td>\n      <td>19500</td>\n      <td>Gasoline</td>\n      <td>420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>45000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Mercedes-Benz</td>\n      <td>Metris Base</td>\n      <td>2021</td>\n      <td>7388</td>\n      <td>Gasoline</td>\n      <td>208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>Black</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>97500</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"%%time\n\ntrain_df = extract_age_features(train_df)\ntest_df = extract_age_features(test_df)\n\n# train = extract_engine_features(train)\n# test = extract_engine_features(test)\n\ntrain_df = extract_other_features(train_df)\ntest_df = extract_other_features(test_df)\n\ntrain_df = transform_other_features(train_df)\ntest_df = transform_other_features(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.284352Z","iopub.execute_input":"2024-09-26T09:27:28.284656Z","iopub.status.idle":"2024-09-26T09:27:28.520562Z","shell.execute_reply.started":"2024-09-26T09:27:28.284623Z","shell.execute_reply":"2024-09-26T09:27:28.519600Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"CPU times: user 226 ms, sys: 818 µs, total: 226 ms\nWall time: 228 ms\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.nunique().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.521894Z","iopub.execute_input":"2024-09-26T09:27:28.522788Z","iopub.status.idle":"2024-09-26T09:27:28.691821Z","shell.execute_reply.started":"2024-09-26T09:27:28.522731Z","shell.execute_reply":"2024-09-26T09:27:28.690892Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"clean_title                      1\naccident                         2\nIs_Luxury_Brand                  2\nfuel_type                        7\nVehicle_Age                     34\nmilage_with_age                 34\nMileage_per_Year_with_age       34\nmodel_year                      34\ntransmission                    52\nbrand                           57\nint_col                        156\next_col                        319\nengine                        1117\nprice                         1569\nmodel                         1897\nmilage                        6651\nMileage_per_Year             30368\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.693290Z","iopub.execute_input":"2024-09-26T09:27:28.693694Z","iopub.status.idle":"2024-09-26T09:27:28.874400Z","shell.execute_reply.started":"2024-09-26T09:27:28.693647Z","shell.execute_reply":"2024-09-26T09:27:28.873459Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 188533 entries, 0 to 188532\nData columns (total 17 columns):\n #   Column                     Non-Null Count   Dtype  \n---  ------                     --------------   -----  \n 0   brand                      188533 non-null  object \n 1   model                      188533 non-null  object \n 2   model_year                 188533 non-null  int64  \n 3   milage                     188533 non-null  int64  \n 4   fuel_type                  183450 non-null  object \n 5   engine                     188533 non-null  object \n 6   transmission               188533 non-null  object \n 7   ext_col                    188533 non-null  object \n 8   int_col                    188533 non-null  object \n 9   accident                   188533 non-null  object \n 10  clean_title                167114 non-null  object \n 11  price                      188533 non-null  int64  \n 12  Vehicle_Age                188533 non-null  int64  \n 13  Mileage_per_Year           188533 non-null  float64\n 14  milage_with_age            188533 non-null  float64\n 15  Mileage_per_Year_with_age  188533 non-null  float64\n 16  Is_Luxury_Brand            188533 non-null  object \ndtypes: float64(3), int64(4), object(10)\nmemory usage: 25.9+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"def update(df, threshold=100):\n    \n    corrected_category_features = ['model', 'engine', 'transmission', 'ext_col', 'int_col']\n    \n    for col in corrected_category_features:\n        df.loc[df[col].value_counts(dropna=False)[df[col]].values < threshold, col] = \"noise\"\n    \n    for col in corrected_category_features:\n        df[col] = df[col].fillna('missing')\n        \n    return df","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.875619Z","iopub.execute_input":"2024-09-26T09:27:28.875980Z","iopub.status.idle":"2024-09-26T09:27:28.881868Z","shell.execute_reply.started":"2024-09-26T09:27:28.875933Z","shell.execute_reply":"2024-09-26T09:27:28.881015Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"train_df  = update(train_df)\ntest_df   = update(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:28.883172Z","iopub.execute_input":"2024-09-26T09:27:28.883515Z","iopub.status.idle":"2024-09-26T09:27:29.443096Z","shell.execute_reply.started":"2024-09-26T09:27:28.883482Z","shell.execute_reply":"2024-09-26T09:27:29.442229Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# Store numerical and categorical features to different lists for visualization purposes\nfeature_list = [feature for feature in train_df.columns if not feature == 'price']\n\ntarget = \"price\"\n\n#from data set description\n\nbinary_features = ['clean_title', 'accident', 'Is_Luxury_Brand']\n\ncategorical_features = ['brand','model','fuel_type','engine','transmission',\n                        'ext_col','int_col']\n\ntrain_df[binary_features] = train_df[binary_features].astype('category')\ntest_df[binary_features] = test_df[binary_features].astype('category')\n\ntrain_df[categorical_features] = train_df[categorical_features].astype('category')\ntest_df[categorical_features] = test_df[categorical_features].astype('category')\n\ncontinuous_features = list(set(feature_list) - set(binary_features)- set(categorical_features))\nassert feature_list.sort() == (continuous_features + binary_features + categorical_features).sort()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:29.444148Z","iopub.execute_input":"2024-09-26T09:27:29.444452Z","iopub.status.idle":"2024-09-26T09:27:29.839796Z","shell.execute_reply.started":"2024-09-26T09:27:29.444418Z","shell.execute_reply":"2024-09-26T09:27:29.838777Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:29.841092Z","iopub.execute_input":"2024-09-26T09:27:29.841424Z","iopub.status.idle":"2024-09-26T09:27:29.860751Z","shell.execute_reply.started":"2024-09-26T09:27:29.841391Z","shell.execute_reply":"2024-09-26T09:27:29.859841Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 188533 entries, 0 to 188532\nData columns (total 17 columns):\n #   Column                     Non-Null Count   Dtype   \n---  ------                     --------------   -----   \n 0   brand                      188533 non-null  category\n 1   model                      188533 non-null  category\n 2   model_year                 188533 non-null  int64   \n 3   milage                     188533 non-null  int64   \n 4   fuel_type                  183450 non-null  category\n 5   engine                     188533 non-null  category\n 6   transmission               188533 non-null  category\n 7   ext_col                    188533 non-null  category\n 8   int_col                    188533 non-null  category\n 9   accident                   188533 non-null  category\n 10  clean_title                167114 non-null  category\n 11  price                      188533 non-null  int64   \n 12  Vehicle_Age                188533 non-null  int64   \n 13  Mileage_per_Year           188533 non-null  float64 \n 14  milage_with_age            188533 non-null  float64 \n 15  Mileage_per_Year_with_age  188533 non-null  float64 \n 16  Is_Luxury_Brand            188533 non-null  category\ndtypes: category(10), float64(3), int64(4)\nmemory usage: 13.7 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:29.862125Z","iopub.execute_input":"2024-09-26T09:27:29.862762Z","iopub.status.idle":"2024-09-26T09:27:29.879167Z","shell.execute_reply.started":"2024-09-26T09:27:29.862712Z","shell.execute_reply":"2024-09-26T09:27:29.878256Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 125690 entries, 188533 to 314222\nData columns (total 16 columns):\n #   Column                     Non-Null Count   Dtype   \n---  ------                     --------------   -----   \n 0   brand                      125690 non-null  category\n 1   model                      125690 non-null  category\n 2   model_year                 125690 non-null  int64   \n 3   milage                     125690 non-null  int64   \n 4   fuel_type                  122307 non-null  category\n 5   engine                     125690 non-null  category\n 6   transmission               125690 non-null  category\n 7   ext_col                    125690 non-null  category\n 8   int_col                    125690 non-null  category\n 9   accident                   125690 non-null  category\n 10  clean_title                111451 non-null  category\n 11  Vehicle_Age                125690 non-null  int64   \n 12  Mileage_per_Year           125690 non-null  float64 \n 13  milage_with_age            125690 non-null  float64 \n 14  Mileage_per_Year_with_age  125690 non-null  float64 \n 15  Is_Luxury_Brand            125690 non-null  category\ndtypes: category(10), float64(3), int64(3)\nmemory usage: 8.2 MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Exploratory Data Analysis","metadata":{}},{"cell_type":"code","source":"print(continuous_features)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:29.880522Z","iopub.execute_input":"2024-09-26T09:27:29.881182Z","iopub.status.idle":"2024-09-26T09:27:29.885865Z","shell.execute_reply.started":"2024-09-26T09:27:29.881130Z","shell.execute_reply":"2024-09-26T09:27:29.884944Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"['Vehicle_Age', 'Mileage_per_Year_with_age', 'milage_with_age', 'Mileage_per_Year', 'milage', 'model_year']\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:29.887256Z","iopub.execute_input":"2024-09-26T09:27:29.887893Z","iopub.status.idle":"2024-09-26T09:27:29.957672Z","shell.execute_reply.started":"2024-09-26T09:27:29.887860Z","shell.execute_reply":"2024-09-26T09:27:29.956709Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"                              count      mean       std      min       25%  \\\nmodel_year                 188533.0   2015.83      5.66  1974.00   2013.00   \nmilage                     188533.0  65705.30  49798.16   100.00  24115.00   \nprice                      188533.0  43878.02  78819.52  2000.00  17000.00   \nVehicle_Age                188533.0      9.17      5.66     1.00      5.00   \nMileage_per_Year           188533.0   7226.68   4609.22     5.00   4280.80   \nmilage_with_age            188533.0  65705.30  35500.59  9773.01  34423.87   \nMileage_per_Year_with_age  188533.0   7226.68   1052.22  1326.56   6769.56   \n\n                                50%       75%       max  \nmodel_year                  2017.00   2020.00  2.02e+03  \nmilage                     57785.00  95400.00  4.05e+05  \nprice                      30825.00  49900.00  2.95e+06  \nVehicle_Age                    8.00     12.00  5.10e+01  \nMileage_per_Year            6857.14   9445.83  1.18e+05  \nmilage_with_age            67940.69  92865.34  1.34e+05  \nMileage_per_Year_with_age   7389.73   7975.32  1.46e+04  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>model_year</th>\n      <td>188533.0</td>\n      <td>2015.83</td>\n      <td>5.66</td>\n      <td>1974.00</td>\n      <td>2013.00</td>\n      <td>2017.00</td>\n      <td>2020.00</td>\n      <td>2.02e+03</td>\n    </tr>\n    <tr>\n      <th>milage</th>\n      <td>188533.0</td>\n      <td>65705.30</td>\n      <td>49798.16</td>\n      <td>100.00</td>\n      <td>24115.00</td>\n      <td>57785.00</td>\n      <td>95400.00</td>\n      <td>4.05e+05</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>188533.0</td>\n      <td>43878.02</td>\n      <td>78819.52</td>\n      <td>2000.00</td>\n      <td>17000.00</td>\n      <td>30825.00</td>\n      <td>49900.00</td>\n      <td>2.95e+06</td>\n    </tr>\n    <tr>\n      <th>Vehicle_Age</th>\n      <td>188533.0</td>\n      <td>9.17</td>\n      <td>5.66</td>\n      <td>1.00</td>\n      <td>5.00</td>\n      <td>8.00</td>\n      <td>12.00</td>\n      <td>5.10e+01</td>\n    </tr>\n    <tr>\n      <th>Mileage_per_Year</th>\n      <td>188533.0</td>\n      <td>7226.68</td>\n      <td>4609.22</td>\n      <td>5.00</td>\n      <td>4280.80</td>\n      <td>6857.14</td>\n      <td>9445.83</td>\n      <td>1.18e+05</td>\n    </tr>\n    <tr>\n      <th>milage_with_age</th>\n      <td>188533.0</td>\n      <td>65705.30</td>\n      <td>35500.59</td>\n      <td>9773.01</td>\n      <td>34423.87</td>\n      <td>67940.69</td>\n      <td>92865.34</td>\n      <td>1.34e+05</td>\n    </tr>\n    <tr>\n      <th>Mileage_per_Year_with_age</th>\n      <td>188533.0</td>\n      <td>7226.68</td>\n      <td>1052.22</td>\n      <td>1326.56</td>\n      <td>6769.56</td>\n      <td>7389.73</td>\n      <td>7975.32</td>\n      <td>1.46e+04</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:29.958913Z","iopub.execute_input":"2024-09-26T09:27:29.959236Z","iopub.status.idle":"2024-09-26T09:27:30.008813Z","shell.execute_reply.started":"2024-09-26T09:27:29.959203Z","shell.execute_reply":"2024-09-26T09:27:30.007847Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"                              count      mean       std      min       25%  \\\nmodel_year                 125690.0   2015.80      5.67  1974.00   2013.00   \nmilage                     125690.0  66042.58  50223.86   100.00  24500.00   \nVehicle_Age                125690.0      9.20      5.67     1.00      5.00   \nMileage_per_Year           125690.0   7226.45   4640.49     2.25   4291.67   \nmilage_with_age            125690.0  66042.58  35865.22  2442.00  34258.89   \nMileage_per_Year_with_age  125690.0   7226.45   1026.77    66.00   6704.20   \n\n                                50%       75%        max  \nmodel_year                  2017.00   2020.00    2024.00  \nmilage                     57500.00  95798.00  405000.00  \nVehicle_Age                    8.00     12.00      51.00  \nMileage_per_Year            6850.90   9450.00   99875.00  \nmilage_with_age            68130.89  93031.57  179400.00  \nMileage_per_Year_with_age   7443.65   8041.66   14980.07  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>model_year</th>\n      <td>125690.0</td>\n      <td>2015.80</td>\n      <td>5.67</td>\n      <td>1974.00</td>\n      <td>2013.00</td>\n      <td>2017.00</td>\n      <td>2020.00</td>\n      <td>2024.00</td>\n    </tr>\n    <tr>\n      <th>milage</th>\n      <td>125690.0</td>\n      <td>66042.58</td>\n      <td>50223.86</td>\n      <td>100.00</td>\n      <td>24500.00</td>\n      <td>57500.00</td>\n      <td>95798.00</td>\n      <td>405000.00</td>\n    </tr>\n    <tr>\n      <th>Vehicle_Age</th>\n      <td>125690.0</td>\n      <td>9.20</td>\n      <td>5.67</td>\n      <td>1.00</td>\n      <td>5.00</td>\n      <td>8.00</td>\n      <td>12.00</td>\n      <td>51.00</td>\n    </tr>\n    <tr>\n      <th>Mileage_per_Year</th>\n      <td>125690.0</td>\n      <td>7226.45</td>\n      <td>4640.49</td>\n      <td>2.25</td>\n      <td>4291.67</td>\n      <td>6850.90</td>\n      <td>9450.00</td>\n      <td>99875.00</td>\n    </tr>\n    <tr>\n      <th>milage_with_age</th>\n      <td>125690.0</td>\n      <td>66042.58</td>\n      <td>35865.22</td>\n      <td>2442.00</td>\n      <td>34258.89</td>\n      <td>68130.89</td>\n      <td>93031.57</td>\n      <td>179400.00</td>\n    </tr>\n    <tr>\n      <th>Mileage_per_Year_with_age</th>\n      <td>125690.0</td>\n      <td>7226.45</td>\n      <td>1026.77</td>\n      <td>66.00</td>\n      <td>6704.20</td>\n      <td>7443.65</td>\n      <td>8041.66</td>\n      <td>14980.07</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#Data is huge just take some sample for eda\n#eda_df = train_df.sample(frac=0.01)\n#sub_df = test_df.sample(frac=0.01)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:30.014369Z","iopub.execute_input":"2024-09-26T09:27:30.014704Z","iopub.status.idle":"2024-09-26T09:27:30.018532Z","shell.execute_reply.started":"2024-09-26T09:27:30.014662Z","shell.execute_reply":"2024-09-26T09:27:30.017620Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"#fig, ax = plt.subplots(2, 3, figsize=(60, 40))\n#for var, subplot in zip(continuous_features, ax.flatten()):\n#    sns.boxplot(x=var, y='price', data=eda_df, ax=subplot, hue = 'price')","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:30.019783Z","iopub.execute_input":"2024-09-26T09:27:30.020185Z","iopub.status.idle":"2024-09-26T09:27:30.027829Z","shell.execute_reply.started":"2024-09-26T09:27:30.020131Z","shell.execute_reply":"2024-09-26T09:27:30.027121Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":"### Feature Engineering","metadata":{}},{"cell_type":"code","source":"fe_df = train_df[continuous_features + ['price']]","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:30.028846Z","iopub.execute_input":"2024-09-26T09:27:30.029138Z","iopub.status.idle":"2024-09-26T09:27:30.040880Z","shell.execute_reply.started":"2024-09-26T09:27:30.029106Z","shell.execute_reply":"2024-09-26T09:27:30.040155Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# Display correlations between numerical features and saleprice on heatmap.\n\nsns.set(font_scale=1.1)\ncorrelation_train = fe_df.corr()\nmask = np.triu(correlation_train.corr())\nplt.figure(figsize=(10, 10))\nsns.heatmap(correlation_train,\n            annot=True,\n            fmt='.1f',\n            cmap='coolwarm',\n            square=True,\n            mask=mask,\n            linewidths=1,\n            cbar=False);","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:30.042023Z","iopub.execute_input":"2024-09-26T09:27:30.042309Z","iopub.status.idle":"2024-09-26T09:27:30.506361Z","shell.execute_reply.started":"2024-09-26T09:27:30.042278Z","shell.execute_reply":"2024-09-26T09:27:30.505404Z"},"trusted":true},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# mutual information for numerical features\n#You need to fillna to get results from mutual_info_regression function\nmutual_df = train_df[continuous_features]\n\nmutual_info = mutual_info_regression(mutual_df.fillna(0), train_df['price'], random_state=1)\n\nmutual_info = pd.Series(mutual_info)\nmutual_info.index = mutual_df.columns\npd.DataFrame(mutual_info.sort_values(ascending=False), columns = [\"Numerical_Feature_MI\"] ).style.background_gradient(\"cool\")","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:30.507579Z","iopub.execute_input":"2024-09-26T09:27:30.507864Z","iopub.status.idle":"2024-09-26T09:27:39.138349Z","shell.execute_reply.started":"2024-09-26T09:27:30.507833Z","shell.execute_reply":"2024-09-26T09:27:39.137372Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7fa853033760>","text/html":"<style type=\"text/css\">\n#T_2872e_row0_col0 {\n  background-color: #ff00ff;\n  color: #f1f1f1;\n}\n#T_2872e_row1_col0, #T_2872e_row2_col0 {\n  background-color: #ba45ff;\n  color: #f1f1f1;\n}\n#T_2872e_row3_col0 {\n  background-color: #b946ff;\n  color: #f1f1f1;\n}\n#T_2872e_row4_col0 {\n  background-color: #b847ff;\n  color: #f1f1f1;\n}\n#T_2872e_row5_col0 {\n  background-color: #00ffff;\n  color: #000000;\n}\n</style>\n<table id=\"T_2872e\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_2872e_level0_col0\" class=\"col_heading level0 col0\" >Numerical_Feature_MI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_2872e_level0_row0\" class=\"row_heading level0 row0\" >milage</th>\n      <td id=\"T_2872e_row0_col0\" class=\"data row0 col0\" >0.660111</td>\n    </tr>\n    <tr>\n      <th id=\"T_2872e_level0_row1\" class=\"row_heading level0 row1\" >Vehicle_Age</th>\n      <td id=\"T_2872e_row1_col0\" class=\"data row1 col0\" >0.543976</td>\n    </tr>\n    <tr>\n      <th id=\"T_2872e_level0_row2\" class=\"row_heading level0 row2\" >model_year</th>\n      <td id=\"T_2872e_row2_col0\" class=\"data row2 col0\" >0.543636</td>\n    </tr>\n    <tr>\n      <th id=\"T_2872e_level0_row3\" class=\"row_heading level0 row3\" >Mileage_per_Year_with_age</th>\n      <td id=\"T_2872e_row3_col0\" class=\"data row3 col0\" >0.541415</td>\n    </tr>\n    <tr>\n      <th id=\"T_2872e_level0_row4\" class=\"row_heading level0 row4\" >milage_with_age</th>\n      <td id=\"T_2872e_row4_col0\" class=\"data row4 col0\" >0.541007</td>\n    </tr>\n    <tr>\n      <th id=\"T_2872e_level0_row5\" class=\"row_heading level0 row5\" >Mileage_per_Year</th>\n      <td id=\"T_2872e_row5_col0\" class=\"data row5 col0\" >0.232086</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"#fig, ax = plt.subplots(2, 4, figsize=(80, 40))\n#for var, subplot in zip(categorical_features, ax.flatten()):    \n#    sns.boxplot(x=var, y='price', data=train_df, ax=subplot, palette='Set3')\n#    for ax in fig.axes:\n#        plt.sca(ax)\n#        plt.xticks(rotation=60)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:39.139538Z","iopub.execute_input":"2024-09-26T09:27:39.139864Z","iopub.status.idle":"2024-09-26T09:27:39.143894Z","shell.execute_reply.started":"2024-09-26T09:27:39.139831Z","shell.execute_reply":"2024-09-26T09:27:39.143043Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"#categorical features must be encoded to get mutual information\nmutual_df_categorical = train_df[categorical_features]\n\nfor colname in mutual_df_categorical:\n    mutual_df_categorical[colname], _ = mutual_df_categorical[colname].factorize()\nmutual_info = mutual_info_regression(mutual_df_categorical.fillna(\"Missing\"), train_df['price'], random_state=1)\n\nmutual_info = pd.Series(mutual_info)\nmutual_info.index = mutual_df_categorical.columns\npd.DataFrame(mutual_info.sort_values(ascending=False), columns = [\"Categorical_Feature_MI\"] ).style.background_gradient(\"cool\")","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:39.145182Z","iopub.execute_input":"2024-09-26T09:27:39.145492Z","iopub.status.idle":"2024-09-26T09:27:49.131845Z","shell.execute_reply.started":"2024-09-26T09:27:39.145460Z","shell.execute_reply":"2024-09-26T09:27:49.130868Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7fa853b3a4a0>","text/html":"<style type=\"text/css\">\n#T_fd120_row0_col0 {\n  background-color: #ff00ff;\n  color: #f1f1f1;\n}\n#T_fd120_row1_col0 {\n  background-color: #7887ff;\n  color: #f1f1f1;\n}\n#T_fd120_row2_col0 {\n  background-color: #5ba4ff;\n  color: #f1f1f1;\n}\n#T_fd120_row3_col0 {\n  background-color: #2dd2ff;\n  color: #000000;\n}\n#T_fd120_row4_col0 {\n  background-color: #2cd3ff;\n  color: #000000;\n}\n#T_fd120_row5_col0 {\n  background-color: #0ff0ff;\n  color: #000000;\n}\n#T_fd120_row6_col0 {\n  background-color: #00ffff;\n  color: #000000;\n}\n</style>\n<table id=\"T_fd120\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_fd120_level0_col0\" class=\"col_heading level0 col0\" >Categorical_Feature_MI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_fd120_level0_row0\" class=\"row_heading level0 row0\" >transmission</th>\n      <td id=\"T_fd120_row0_col0\" class=\"data row0 col0\" >0.153008</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd120_level0_row1\" class=\"row_heading level0 row1\" >int_col</th>\n      <td id=\"T_fd120_row1_col0\" class=\"data row1 col0\" >0.075144</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd120_level0_row2\" class=\"row_heading level0 row2\" >ext_col</th>\n      <td id=\"T_fd120_row2_col0\" class=\"data row2 col0\" >0.058733</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd120_level0_row3\" class=\"row_heading level0 row3\" >brand</th>\n      <td id=\"T_fd120_row3_col0\" class=\"data row3 col0\" >0.032581</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd120_level0_row4\" class=\"row_heading level0 row4\" >fuel_type</th>\n      <td id=\"T_fd120_row4_col0\" class=\"data row4 col0\" >0.031742</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd120_level0_row5\" class=\"row_heading level0 row5\" >engine</th>\n      <td id=\"T_fd120_row5_col0\" class=\"data row5 col0\" >0.014878</td>\n    </tr>\n    <tr>\n      <th id=\"T_fd120_level0_row6\" class=\"row_heading level0 row6\" >model</th>\n      <td id=\"T_fd120_row6_col0\" class=\"data row6 col0\" >0.006238</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"callbacks = [log_evaluation(period=300), early_stopping(stopping_rounds=200)]\n\ncat_cols = train_df.select_dtypes(include=['object', 'category']).columns.tolist()\n\nprint(f\"cat_cols--------{cat_cols}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:49.133084Z","iopub.execute_input":"2024-09-26T09:27:49.133432Z","iopub.status.idle":"2024-09-26T09:27:49.140672Z","shell.execute_reply.started":"2024-09-26T09:27:49.133396Z","shell.execute_reply":"2024-09-26T09:27:49.139701Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"cat_cols--------['brand', 'model', 'fuel_type', 'engine', 'transmission', 'ext_col', 'int_col', 'accident', 'clean_title', 'Is_Luxury_Brand']\n","output_type":"stream"}]},{"cell_type":"code","source":"labelencoder = LabelEncoder()\n\nfor col in cat_cols:\n    train_df[col] = labelencoder.fit_transform(train_df[col])\n    train_df[col] = train_df[col].astype('int32')\n    test_df[col] = labelencoder.fit_transform(test_df[col])\n    test_df[col] = test_df[col].astype('int32')","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:49.141902Z","iopub.execute_input":"2024-09-26T09:27:49.142253Z","iopub.status.idle":"2024-09-26T09:27:49.894430Z","shell.execute_reply.started":"2024-09-26T09:27:49.142219Z","shell.execute_reply":"2024-09-26T09:27:49.893608Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"train_df.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:49.895722Z","iopub.execute_input":"2024-09-26T09:27:49.896574Z","iopub.status.idle":"2024-09-26T09:27:50.035439Z","shell.execute_reply.started":"2024-09-26T09:27:49.896528Z","shell.execute_reply":"2024-09-26T09:27:50.034541Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"                              count      mean       std      min       25%  \\\nbrand                      188533.0     23.16     15.87     0.00      9.00   \nmodel                      188533.0    296.51    159.28     0.00    160.00   \nmodel_year                 188533.0   2015.83      5.66  1974.00   2013.00   \nmilage                     188533.0  65705.30  49798.16   100.00  24115.00   \nfuel_type                  188533.0      2.12      0.94     0.00      2.00   \nengine                     188533.0    233.63    120.96     0.00    135.00   \ntransmission               188533.0     17.60      8.04     0.00     11.00   \next_col                    188533.0     31.73     21.39     0.00      5.00   \nint_col                    188533.0      6.10      9.49     0.00      1.00   \naccident                   188533.0      0.23      0.42     0.00      0.00   \nclean_title                188533.0      0.11      0.32     0.00      0.00   \nprice                      188533.0  43878.02  78819.52  2000.00  17000.00   \nVehicle_Age                188533.0      9.17      5.66     1.00      5.00   \nMileage_per_Year           188533.0   7226.68   4609.22     5.00   4280.80   \nmilage_with_age            188533.0  65705.30  35500.59  9773.01  34423.87   \nMileage_per_Year_with_age  188533.0   7226.68   1052.22  1326.56   6769.56   \nIs_Luxury_Brand            188533.0      0.43      0.50     0.00      0.00   \n\n                                50%       75%       max  \nbrand                         21.00     36.00  5.60e+01  \nmodel                        303.00    480.00  4.80e+02  \nmodel_year                  2017.00   2020.00  2.02e+03  \nmilage                     57785.00  95400.00  4.05e+05  \nfuel_type                      2.00      2.00  7.00e+00  \nengine                       246.00    338.00  4.06e+02  \ntransmission                  19.00     23.00  3.00e+01  \next_col                       30.00     56.00  6.00e+01  \nint_col                        1.00     10.00  3.30e+01  \naccident                       0.00      0.00  1.00e+00  \nclean_title                    0.00      0.00  1.00e+00  \nprice                      30825.00  49900.00  2.95e+06  \nVehicle_Age                    8.00     12.00  5.10e+01  \nMileage_per_Year            6857.14   9445.83  1.18e+05  \nmilage_with_age            67940.69  92865.34  1.34e+05  \nMileage_per_Year_with_age   7389.73   7975.32  1.46e+04  \nIs_Luxury_Brand                0.00      1.00  1.00e+00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>brand</th>\n      <td>188533.0</td>\n      <td>23.16</td>\n      <td>15.87</td>\n      <td>0.00</td>\n      <td>9.00</td>\n      <td>21.00</td>\n      <td>36.00</td>\n      <td>5.60e+01</td>\n    </tr>\n    <tr>\n      <th>model</th>\n      <td>188533.0</td>\n      <td>296.51</td>\n      <td>159.28</td>\n      <td>0.00</td>\n      <td>160.00</td>\n      <td>303.00</td>\n      <td>480.00</td>\n      <td>4.80e+02</td>\n    </tr>\n    <tr>\n      <th>model_year</th>\n      <td>188533.0</td>\n      <td>2015.83</td>\n      <td>5.66</td>\n      <td>1974.00</td>\n      <td>2013.00</td>\n      <td>2017.00</td>\n      <td>2020.00</td>\n      <td>2.02e+03</td>\n    </tr>\n    <tr>\n      <th>milage</th>\n      <td>188533.0</td>\n      <td>65705.30</td>\n      <td>49798.16</td>\n      <td>100.00</td>\n      <td>24115.00</td>\n      <td>57785.00</td>\n      <td>95400.00</td>\n      <td>4.05e+05</td>\n    </tr>\n    <tr>\n      <th>fuel_type</th>\n      <td>188533.0</td>\n      <td>2.12</td>\n      <td>0.94</td>\n      <td>0.00</td>\n      <td>2.00</td>\n      <td>2.00</td>\n      <td>2.00</td>\n      <td>7.00e+00</td>\n    </tr>\n    <tr>\n      <th>engine</th>\n      <td>188533.0</td>\n      <td>233.63</td>\n      <td>120.96</td>\n      <td>0.00</td>\n      <td>135.00</td>\n      <td>246.00</td>\n      <td>338.00</td>\n      <td>4.06e+02</td>\n    </tr>\n    <tr>\n      <th>transmission</th>\n      <td>188533.0</td>\n      <td>17.60</td>\n      <td>8.04</td>\n      <td>0.00</td>\n      <td>11.00</td>\n      <td>19.00</td>\n      <td>23.00</td>\n      <td>3.00e+01</td>\n    </tr>\n    <tr>\n      <th>ext_col</th>\n      <td>188533.0</td>\n      <td>31.73</td>\n      <td>21.39</td>\n      <td>0.00</td>\n      <td>5.00</td>\n      <td>30.00</td>\n      <td>56.00</td>\n      <td>6.00e+01</td>\n    </tr>\n    <tr>\n      <th>int_col</th>\n      <td>188533.0</td>\n      <td>6.10</td>\n      <td>9.49</td>\n      <td>0.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>10.00</td>\n      <td>3.30e+01</td>\n    </tr>\n    <tr>\n      <th>accident</th>\n      <td>188533.0</td>\n      <td>0.23</td>\n      <td>0.42</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00e+00</td>\n    </tr>\n    <tr>\n      <th>clean_title</th>\n      <td>188533.0</td>\n      <td>0.11</td>\n      <td>0.32</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00e+00</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>188533.0</td>\n      <td>43878.02</td>\n      <td>78819.52</td>\n      <td>2000.00</td>\n      <td>17000.00</td>\n      <td>30825.00</td>\n      <td>49900.00</td>\n      <td>2.95e+06</td>\n    </tr>\n    <tr>\n      <th>Vehicle_Age</th>\n      <td>188533.0</td>\n      <td>9.17</td>\n      <td>5.66</td>\n      <td>1.00</td>\n      <td>5.00</td>\n      <td>8.00</td>\n      <td>12.00</td>\n      <td>5.10e+01</td>\n    </tr>\n    <tr>\n      <th>Mileage_per_Year</th>\n      <td>188533.0</td>\n      <td>7226.68</td>\n      <td>4609.22</td>\n      <td>5.00</td>\n      <td>4280.80</td>\n      <td>6857.14</td>\n      <td>9445.83</td>\n      <td>1.18e+05</td>\n    </tr>\n    <tr>\n      <th>milage_with_age</th>\n      <td>188533.0</td>\n      <td>65705.30</td>\n      <td>35500.59</td>\n      <td>9773.01</td>\n      <td>34423.87</td>\n      <td>67940.69</td>\n      <td>92865.34</td>\n      <td>1.34e+05</td>\n    </tr>\n    <tr>\n      <th>Mileage_per_Year_with_age</th>\n      <td>188533.0</td>\n      <td>7226.68</td>\n      <td>1052.22</td>\n      <td>1326.56</td>\n      <td>6769.56</td>\n      <td>7389.73</td>\n      <td>7975.32</td>\n      <td>1.46e+04</td>\n    </tr>\n    <tr>\n      <th>Is_Luxury_Brand</th>\n      <td>188533.0</td>\n      <td>0.43</td>\n      <td>0.50</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00</td>\n      <td>1.00e+00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:50.036763Z","iopub.execute_input":"2024-09-26T09:27:50.037109Z","iopub.status.idle":"2024-09-26T09:27:50.052397Z","shell.execute_reply.started":"2024-09-26T09:27:50.037075Z","shell.execute_reply":"2024-09-26T09:27:50.051504Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 188533 entries, 0 to 188532\nData columns (total 17 columns):\n #   Column                     Non-Null Count   Dtype  \n---  ------                     --------------   -----  \n 0   brand                      188533 non-null  int32  \n 1   model                      188533 non-null  int32  \n 2   model_year                 188533 non-null  int64  \n 3   milage                     188533 non-null  int64  \n 4   fuel_type                  188533 non-null  int32  \n 5   engine                     188533 non-null  int32  \n 6   transmission               188533 non-null  int32  \n 7   ext_col                    188533 non-null  int32  \n 8   int_col                    188533 non-null  int32  \n 9   accident                   188533 non-null  int32  \n 10  clean_title                188533 non-null  int32  \n 11  price                      188533 non-null  int64  \n 12  Vehicle_Age                188533 non-null  int64  \n 13  Mileage_per_Year           188533 non-null  float64\n 14  milage_with_age            188533 non-null  float64\n 15  Mileage_per_Year_with_age  188533 non-null  float64\n 16  Is_Luxury_Brand            188533 non-null  int32  \ndtypes: float64(3), int32(10), int64(4)\nmemory usage: 18.7 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:50.053623Z","iopub.execute_input":"2024-09-26T09:27:50.054017Z","iopub.status.idle":"2024-09-26T09:27:50.146886Z","shell.execute_reply.started":"2024-09-26T09:27:50.053953Z","shell.execute_reply":"2024-09-26T09:27:50.145928Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"                              count      mean       std      min       25%  \\\nbrand                      125690.0     23.06     15.63     0.00      9.00   \nmodel                      125690.0    216.14    107.72     0.00    124.00   \nmodel_year                 125690.0   2015.80      5.67  1974.00   2013.00   \nmilage                     125690.0  66042.58  50223.86   100.00  24500.00   \nfuel_type                  125690.0      2.12      0.94     0.00      2.00   \nengine                     125690.0    177.49     92.54     0.00     98.00   \ntransmission               125690.0     16.20      7.29     0.00     10.00   \next_col                    125690.0     21.97     14.79     0.00      4.00   \nint_col                    125690.0      5.13      7.61     0.00      1.00   \naccident                   125690.0      0.23      0.42     0.00      0.00   \nclean_title                125690.0      0.11      0.32     0.00      0.00   \nVehicle_Age                125690.0      9.20      5.67     1.00      5.00   \nMileage_per_Year           125690.0   7226.45   4640.49     2.25   4291.67   \nmilage_with_age            125690.0  66042.58  35865.22  2442.00  34258.89   \nMileage_per_Year_with_age  125690.0   7226.45   1026.77    66.00   6704.20   \nIs_Luxury_Brand            125690.0      0.43      0.50     0.00      0.00   \n\n                                50%       75%        max  \nbrand                         21.00     36.00      54.00  \nmodel                        242.00    322.00     322.00  \nmodel_year                  2017.00   2020.00    2024.00  \nmilage                     57500.00  95798.00  405000.00  \nfuel_type                      2.00      2.00       7.00  \nengine                       178.00    270.00     296.00  \ntransmission                  17.00     21.00      28.00  \next_col                       19.00     39.00      43.00  \nint_col                        1.00      8.00      26.00  \naccident                       0.00      0.00       1.00  \nclean_title                    0.00      0.00       1.00  \nVehicle_Age                    8.00     12.00      51.00  \nMileage_per_Year            6850.90   9450.00   99875.00  \nmilage_with_age            68130.89  93031.57  179400.00  \nMileage_per_Year_with_age   7443.65   8041.66   14980.07  \nIs_Luxury_Brand                0.00      1.00       1.00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>brand</th>\n      <td>125690.0</td>\n      <td>23.06</td>\n      <td>15.63</td>\n      <td>0.00</td>\n      <td>9.00</td>\n      <td>21.00</td>\n      <td>36.00</td>\n      <td>54.00</td>\n    </tr>\n    <tr>\n      <th>model</th>\n      <td>125690.0</td>\n      <td>216.14</td>\n      <td>107.72</td>\n      <td>0.00</td>\n      <td>124.00</td>\n      <td>242.00</td>\n      <td>322.00</td>\n      <td>322.00</td>\n    </tr>\n    <tr>\n      <th>model_year</th>\n      <td>125690.0</td>\n      <td>2015.80</td>\n      <td>5.67</td>\n      <td>1974.00</td>\n      <td>2013.00</td>\n      <td>2017.00</td>\n      <td>2020.00</td>\n      <td>2024.00</td>\n    </tr>\n    <tr>\n      <th>milage</th>\n      <td>125690.0</td>\n      <td>66042.58</td>\n      <td>50223.86</td>\n      <td>100.00</td>\n      <td>24500.00</td>\n      <td>57500.00</td>\n      <td>95798.00</td>\n      <td>405000.00</td>\n    </tr>\n    <tr>\n      <th>fuel_type</th>\n      <td>125690.0</td>\n      <td>2.12</td>\n      <td>0.94</td>\n      <td>0.00</td>\n      <td>2.00</td>\n      <td>2.00</td>\n      <td>2.00</td>\n      <td>7.00</td>\n    </tr>\n    <tr>\n      <th>engine</th>\n      <td>125690.0</td>\n      <td>177.49</td>\n      <td>92.54</td>\n      <td>0.00</td>\n      <td>98.00</td>\n      <td>178.00</td>\n      <td>270.00</td>\n      <td>296.00</td>\n    </tr>\n    <tr>\n      <th>transmission</th>\n      <td>125690.0</td>\n      <td>16.20</td>\n      <td>7.29</td>\n      <td>0.00</td>\n      <td>10.00</td>\n      <td>17.00</td>\n      <td>21.00</td>\n      <td>28.00</td>\n    </tr>\n    <tr>\n      <th>ext_col</th>\n      <td>125690.0</td>\n      <td>21.97</td>\n      <td>14.79</td>\n      <td>0.00</td>\n      <td>4.00</td>\n      <td>19.00</td>\n      <td>39.00</td>\n      <td>43.00</td>\n    </tr>\n    <tr>\n      <th>int_col</th>\n      <td>125690.0</td>\n      <td>5.13</td>\n      <td>7.61</td>\n      <td>0.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>8.00</td>\n      <td>26.00</td>\n    </tr>\n    <tr>\n      <th>accident</th>\n      <td>125690.0</td>\n      <td>0.23</td>\n      <td>0.42</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>clean_title</th>\n      <td>125690.0</td>\n      <td>0.11</td>\n      <td>0.32</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>Vehicle_Age</th>\n      <td>125690.0</td>\n      <td>9.20</td>\n      <td>5.67</td>\n      <td>1.00</td>\n      <td>5.00</td>\n      <td>8.00</td>\n      <td>12.00</td>\n      <td>51.00</td>\n    </tr>\n    <tr>\n      <th>Mileage_per_Year</th>\n      <td>125690.0</td>\n      <td>7226.45</td>\n      <td>4640.49</td>\n      <td>2.25</td>\n      <td>4291.67</td>\n      <td>6850.90</td>\n      <td>9450.00</td>\n      <td>99875.00</td>\n    </tr>\n    <tr>\n      <th>milage_with_age</th>\n      <td>125690.0</td>\n      <td>66042.58</td>\n      <td>35865.22</td>\n      <td>2442.00</td>\n      <td>34258.89</td>\n      <td>68130.89</td>\n      <td>93031.57</td>\n      <td>179400.00</td>\n    </tr>\n    <tr>\n      <th>Mileage_per_Year_with_age</th>\n      <td>125690.0</td>\n      <td>7226.45</td>\n      <td>1026.77</td>\n      <td>66.00</td>\n      <td>6704.20</td>\n      <td>7443.65</td>\n      <td>8041.66</td>\n      <td>14980.07</td>\n    </tr>\n    <tr>\n      <th>Is_Luxury_Brand</th>\n      <td>125690.0</td>\n      <td>0.43</td>\n      <td>0.50</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:50.147936Z","iopub.execute_input":"2024-09-26T09:27:50.148269Z","iopub.status.idle":"2024-09-26T09:27:50.163016Z","shell.execute_reply.started":"2024-09-26T09:27:50.148236Z","shell.execute_reply":"2024-09-26T09:27:50.162084Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 125690 entries, 188533 to 314222\nData columns (total 16 columns):\n #   Column                     Non-Null Count   Dtype  \n---  ------                     --------------   -----  \n 0   brand                      125690 non-null  int32  \n 1   model                      125690 non-null  int32  \n 2   model_year                 125690 non-null  int64  \n 3   milage                     125690 non-null  int64  \n 4   fuel_type                  125690 non-null  int32  \n 5   engine                     125690 non-null  int32  \n 6   transmission               125690 non-null  int32  \n 7   ext_col                    125690 non-null  int32  \n 8   int_col                    125690 non-null  int32  \n 9   accident                   125690 non-null  int32  \n 10  clean_title                125690 non-null  int32  \n 11  Vehicle_Age                125690 non-null  int64  \n 12  Mileage_per_Year           125690 non-null  float64\n 13  milage_with_age            125690 non-null  float64\n 14  Mileage_per_Year_with_age  125690 non-null  float64\n 15  Is_Luxury_Brand            125690 non-null  int32  \ndtypes: float64(3), int32(10), int64(3)\nmemory usage: 11.5 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"X = train_df.drop('price', axis=1)\ny = train_df['price']","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:50.164381Z","iopub.execute_input":"2024-09-26T09:27:50.164705Z","iopub.status.idle":"2024-09-26T09:27:50.180637Z","shell.execute_reply.started":"2024-09-26T09:27:50.164672Z","shell.execute_reply":"2024-09-26T09:27:50.179866Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"def get_MAE_oof(df, target, lgb_params, cat_params=None, model_type='LGBM'):\n\n    oof_predictions = np.zeros(len(df))\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    models = []\n    rmse_scores = []\n    \n    for fold, (train_idx, val_idx) in enumerate(kf.split(df)):\n        print(f\"Training fold {fold + 1}/{5} with {model_type}\")\n\n        X_train, X_val = df.iloc[train_idx], df.iloc[val_idx]\n        y_train, y_val = target.iloc[train_idx], target.iloc[val_idx]\n\n        if model_type == 'LGBM':\n            train_data = lgb.Dataset(X_train, label=y_train)\n            val_data = lgb.Dataset(X_val, label=y_val, reference=train_data)\n            \n            model = lgb.train(\n                lgb_params,\n                train_data,\n                valid_sets=[train_data, val_data],\n                valid_names=['train', 'valid'],\n                callbacks=callbacks    \n            )\n        \n        elif model_type == 'CAT':\n            train_data = Pool(data=X_train, label=y_train , cat_features=cat_cols)\n            val_data = Pool(data=X_val, label=y_val , cat_features=cat_cols )\n            \n            model = CatBoostRegressor(**cat_params)\n            model.fit(train_data, eval_set=val_data, verbose=150, early_stopping_rounds=200)\n        \n        models.append(model)\n        \n        if model_type == 'LGBM':\n            pred = model.predict(X_val, num_iteration=model.best_iteration)\n        elif model_type == 'CAT':\n            pred = model.predict(X_val)\n        \n        rmse = np.sqrt(mean_squared_error(y_val, pred))\n        rmse_scores.append(rmse)\n\n        print(f'{model_type} Fold RMSE: {rmse}')\n        \n        oof_predictions[val_idx] = pred\n        \n    print(f'Mean RMSE: {np.mean(rmse_scores)}')\n    return oof_predictions, models\n\nlgb_params = {\n    'objective': 'MAE',\n    'n_estimators': 1000,\n    'random_state': 42,\n}\n\noof_predictions_lgbm, models_lgbm = get_MAE_oof(X, y, lgb_params, model_type='LGBM')\nX['LGBM_MAE'] = oof_predictions_lgbm\n\nLGBM_preds = np.zeros(len(test_df))\nfor model in models_lgbm:\n    LGBM_preds += model.predict(test_df) / len(models_lgbm)\ntest_df['LGBM_MAE'] = LGBM_preds\n\nlgb_params = {\n    'objective': 'MSE',\n    'n_estimators': 1000,\n    'random_state': 42,\n}\n\noof_predictions_lgbm, models_lgbm = get_MAE_oof(X, y, lgb_params, model_type='LGBM')\n\nX['LGBM_MSE_diff'] = oof_predictions_lgbm - X['LGBM_MAE']\n\nLGBM_preds = np.zeros(len(test_df))\nfor model in models_lgbm:\n    LGBM_preds += model.predict(test_df) / len(models_lgbm)\ntest_df['LGBM_MSE_diff'] = LGBM_preds - test_df['LGBM_MAE']","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:27:50.182062Z","iopub.execute_input":"2024-09-26T09:27:50.182366Z","iopub.status.idle":"2024-09-26T09:29:02.031548Z","shell.execute_reply.started":"2024-09-26T09:27:50.182333Z","shell.execute_reply":"2024-09-26T09:29:02.030646Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Training fold 1/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017454 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1337\n[LightGBM] [Info] Number of data points in the train set: 150826, number of used features: 16\n[LightGBM] [Info] Start training from score 30798.000000\nTraining until validation scores don't improve for 200 rounds\n[300]\ttrain's l1: 16856.2\tvalid's l1: 17181.2\n[600]\ttrain's l1: 16592.4\tvalid's l1: 17137\n[900]\ttrain's l1: 16435.8\tvalid's l1: 17123.8\nDid not meet early stopping. Best iteration is:\n[969]\ttrain's l1: 16393\tvalid's l1: 17120.4\nLGBM Fold RMSE: 69092.84648553826\nTraining fold 2/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020071 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1333\n[LightGBM] [Info] Number of data points in the train set: 150826, number of used features: 16\n[LightGBM] [Info] Start training from score 30798.000000\nTraining until validation scores don't improve for 200 rounds\n[300]\ttrain's l1: 16926.8\tvalid's l1: 17105.5\n[600]\ttrain's l1: 16606.8\tvalid's l1: 17043.1\n[900]\ttrain's l1: 16432.5\tvalid's l1: 17030.7\nDid not meet early stopping. Best iteration is:\n[886]\ttrain's l1: 16440.5\tvalid's l1: 17027.6\nLGBM Fold RMSE: 69555.7128714735\nTraining fold 3/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019973 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1336\n[LightGBM] [Info] Number of data points in the train set: 150826, number of used features: 16\n[LightGBM] [Info] Start training from score 30825.000000\nTraining until validation scores don't improve for 200 rounds\n[300]\ttrain's l1: 16912.2\tvalid's l1: 17180.6\n[600]\ttrain's l1: 16672.6\tvalid's l1: 17137.7\n[900]\ttrain's l1: 16473.4\tvalid's l1: 17112.8\nDid not meet early stopping. Best iteration is:\n[963]\ttrain's l1: 16418.2\tvalid's l1: 17106.6\nLGBM Fold RMSE: 74708.66876064023\nTraining fold 4/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018837 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1337\n[LightGBM] [Info] Number of data points in the train set: 150827, number of used features: 16\n[LightGBM] [Info] Start training from score 30750.000000\nTraining until validation scores don't improve for 200 rounds\n[300]\ttrain's l1: 16834.3\tvalid's l1: 17366.3\n[600]\ttrain's l1: 16559.8\tvalid's l1: 17345.1\n[900]\ttrain's l1: 16377.3\tvalid's l1: 17333.2\nDid not meet early stopping. Best iteration is:\n[981]\ttrain's l1: 16331.1\tvalid's l1: 17329.6\nLGBM Fold RMSE: 77543.0193210511\nTraining fold 5/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020520 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1336\n[LightGBM] [Info] Number of data points in the train set: 150827, number of used features: 16\n[LightGBM] [Info] Start training from score 30900.000000\nTraining until validation scores don't improve for 200 rounds\n[300]\ttrain's l1: 16809\tvalid's l1: 17478.1\n[600]\ttrain's l1: 16505.2\tvalid's l1: 17448.4\n[900]\ttrain's l1: 16325.5\tvalid's l1: 17438.4\nDid not meet early stopping. Best iteration is:\n[912]\ttrain's l1: 16322.1\tvalid's l1: 17438.2\nLGBM Fold RMSE: 77381.55592201836\nMean RMSE: 73656.36067214429\nTraining fold 1/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018813 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1592\n[LightGBM] [Info] Number of data points in the train set: 150826, number of used features: 17\n[LightGBM] [Info] Start training from score 43890.785316\nTraining until validation scores don't improve for 200 rounds\nEarly stopping, best iteration is:\n[27]\ttrain's l2: 5.20342e+09\tvalid's l2: 4.64432e+09\nLGBM Fold RMSE: 68149.26921713419\nTraining fold 2/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018960 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1588\n[LightGBM] [Info] Number of data points in the train set: 150826, number of used features: 17\n[LightGBM] [Info] Start training from score 43919.862106\nTraining until validation scores don't improve for 200 rounds\nEarly stopping, best iteration is:\n[23]\ttrain's l2: 5.18868e+09\tvalid's l2: 4.76191e+09\nLGBM Fold RMSE: 69006.56555207433\nTraining fold 3/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019208 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1591\n[LightGBM] [Info] Number of data points in the train set: 150826, number of used features: 17\n[LightGBM] [Info] Start training from score 43915.173001\nTraining until validation scores don't improve for 200 rounds\nEarly stopping, best iteration is:\n[29]\ttrain's l2: 4.99963e+09\tvalid's l2: 5.45722e+09\nLGBM Fold RMSE: 73873.01696480595\nTraining fold 4/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021440 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1592\n[LightGBM] [Info] Number of data points in the train set: 150827, number of used features: 17\n[LightGBM] [Info] Start training from score 43822.212197\nTraining until validation scores don't improve for 200 rounds\nEarly stopping, best iteration is:\n[34]\ttrain's l2: 4.85138e+09\tvalid's l2: 5.85929e+09\nLGBM Fold RMSE: 76545.96945706756\nTraining fold 5/5 with LGBM\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019293 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 1591\n[LightGBM] [Info] Number of data points in the train set: 150827, number of used features: 17\n[LightGBM] [Info] Start training from score 43842.048877\nTraining until validation scores don't improve for 200 rounds\nEarly stopping, best iteration is:\n[31]\ttrain's l2: 4.86754e+09\tvalid's l2: 5.8609e+09\nLGBM Fold RMSE: 76556.54684326515\nMean RMSE: 72826.27360686944\n","output_type":"stream"}]},{"cell_type":"code","source":"def objective_lgb(trial):   \n    lgb_params = {\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 1e-1),\n        'max_depth': trial.suggest_int('max_depth', 5, 50),\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-4, 1.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-4, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 20, 150),\n        'subsample': trial.suggest_uniform('subsample', 0.2, 1.0),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.2, 1.0),\n        'n_estimators': 1000,\n        'random_state': 42\n    }\n\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    rmse_scores = []\n\n    for train_index, val_index in kf.split(X):\n        X_train, X_val = X.iloc[train_index], X.iloc[val_index]\n        y_train, y_val = y.iloc[train_index], y.iloc[val_index]\n\n        train_data = lgb.Dataset(X_train, label=y_train)\n        val_data = lgb.Dataset(X_val, label=y_val, reference=train_data)\n\n        model = lgb.train(lgb_params, \n                          train_data, \n                          valid_sets=[val_data], \n                          callbacks=callbacks\n                         )\n\n        y_pred = model.predict(X_val)\n        rmse = np.sqrt(mean_squared_error(y_val, y_pred))\n        rmse_scores.append(rmse)\n\n    return np.mean(rmse_scores)\n\ndef objective_cat(trial):\n\n    cat_params = {\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 1e-1),\n        'depth': trial.suggest_int('depth', 5, 16),\n        'l2_leaf_reg': trial.suggest_loguniform('l2_leaf_reg', 1e-4, 10.0),\n        'iterations': 1000,\n        'random_strength': trial.suggest_int('random_strength', 0, 100),\n        'cat_features': cat_cols,\n        'random_seed': 42,\n        'task_type': 'GPU',\n        'early_stopping_rounds': 200\n    }\n    \n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    rmse_scores_cat = []\n\n    for train_index, val_index in kf.split(X):\n        X_train, X_val = X.iloc[train_index], X.iloc[val_index]\n        y_train, y_val = y.iloc[train_index], y.iloc[val_index]\n        \n        train_pool = Pool(X_train, y_train, cat_features=cat_cols)\n        val_pool = Pool(X_val, y_val, cat_features=cat_cols)\n        \n        model_cat = CatBoostRegressor(**cat_params)\n        model_cat.fit(train_pool, eval_set=val_pool, verbose=300)\n        \n        y_pred_cat = model_cat.predict(X_val)\n        rmse_cat = np.sqrt(mean_squared_error(y_val, y_pred_cat))\n        rmse_scores_cat.append(rmse_cat)\n    \n    return np.mean(rmse_scores_cat)\n\nif USE_OPTUNA==True:\n    study_lgb = optuna.create_study(direction='minimize')\n    study_lgb.optimize(objective_lgb, n_trials=20)\n\n    print(\"Best LGBM Parameters: \", study_lgb.best_params)\n    print(\"Best LGBM RMSE: \", study_lgb.best_value)\n\n    study_cat = optuna.create_study(direction='minimize')\n    study_cat.optimize(objective_cat, n_trials=2)\n\n    print(\"Best CatBoost Parameters: \", study_cat.best_params)\n    print(\"Best CatBoost RMSE: \", study_cat.best_value)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:29:02.033029Z","iopub.execute_input":"2024-09-26T09:29:02.033643Z","iopub.status.idle":"2024-09-26T09:29:02.052370Z","shell.execute_reply.started":"2024-09-26T09:29:02.033603Z","shell.execute_reply":"2024-09-26T09:29:02.051583Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"lgb_params_1 ={\n\n    'learning_rate': 0.017521301504983752,\n    'max_depth': 42,\n    'reg_alpha': 0.06876635751774487, \n    'reg_lambda': 9.738899198284985,\n    'num_leaves': 131,\n    'subsample': 0.2683765421728044,\n    'colsample_bytree': 0.44346036599709887,\n    'n_estimators': 1000,\n    'random_state': 42,\n    'extra_tree' : True,\n    'verbose' : -1\n}\n\nlgb_params_2 ={\n\n    'learning_rate': 0.017521301504983752,\n    'max_depth': 42,\n    'reg_alpha': 0.06876635751774487, \n    'reg_lambda': 9.738899198284985,\n    'num_leaves': 131,\n    'subsample': 0.2683765421728044,\n    'colsample_bytree': 0.44346036599709887,\n    'n_estimators': 1000,\n    'random_state': 42,\n    'verbose' : -1\n}\n\ncat_params={\n    'learning_rate':0.042,\n    'iterations':1000,\n    'depth':10,\n    'random_strength' : 10,\n    'cat_features':cat_cols,\n    'l2_leaf_reg':0.3,\n    'random_seed':42,\n    'early_stopping_rounds': 200,\n    'task_type':'GPU',\n}\n\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\nrmse_scores = []\nrmse_scores_cat = []\nLGBM_model=[]\nCAT_model =[]\n\ncallbacks = [log_evaluation(period=150), early_stopping(stopping_rounds=200)]\n\nfor train_index, val_index in kf.split(X):\n    X_train, X_val = X.iloc[train_index], X.iloc[val_index]\n    y_train, y_val = y.iloc[train_index], y.iloc[val_index]\n    \n\n    \n    train_data = lgb.Dataset(X_train, label=y_train)\n    val_data = lgb.Dataset(X_val, label=y_val, reference=train_data)\n    \n    model_1 = lgb.train(lgb_params_1,\n                      train_data,\n                      valid_sets=[train_data, val_data],\n                      valid_names=['train', 'valid'],\n                      callbacks=callbacks        \n                      )\n    model_2 = lgb.train(lgb_params_2,\n                  train_data,\n                  valid_sets=[train_data, val_data],\n                  valid_names=['train', 'valid'],\n                  callbacks=callbacks        \n                  )\n    \n    LGBM_model.append(model_1)\n    LGBM_model.append(model_2)\n\n    y_pred = model_1.predict(X_val) * 0.5 + model_2.predict(X_val) * 0.5\n    \n\n    rmse = np.sqrt(mean_squared_error(y_val, y_pred))\n    rmse_scores.append(rmse)\n    \n    print(f'LGBM Fold RMSE: {rmse}')\n    \n    \n    model_cat = CatBoostRegressor(**cat_params)\n    \n\n    train_pool = Pool(X_train, y_train ,cat_features=cat_cols)\n    val_pool = Pool(X_val, y_val , cat_features=cat_cols)\n    model_cat.fit(train_pool, eval_set=val_pool, verbose=300)\n    \n    CAT_model.append(model_cat)\n    y_pred_cat = model_cat.predict(X_val)\n    rmse_cat = np.sqrt(mean_squared_error(y_val, y_pred_cat))\n    rmse_scores_cat.append(rmse_cat)\n    \n    print(f'CAT Fold RMSE: {rmse_cat}')\n\n\nprint(f'Mean LGBM RMSE: {np.mean(rmse_scores)}')\nprint(f'Mean CAT RMSE: {np.mean(rmse_scores_cat)}')","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:29:02.053795Z","iopub.execute_input":"2024-09-26T09:29:02.054408Z","iopub.status.idle":"2024-09-26T09:32:21.499581Z","shell.execute_reply.started":"2024-09-26T09:29:02.054367Z","shell.execute_reply":"2024-09-26T09:32:21.498550Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"Training until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 5.47404e+09\tvalid's l2: 4.68816e+09\n[300]\ttrain's l2: 5.37817e+09\tvalid's l2: 4.63895e+09\n[450]\ttrain's l2: 5.31645e+09\tvalid's l2: 4.62604e+09\n[600]\ttrain's l2: 5.26351e+09\tvalid's l2: 4.62001e+09\n[750]\ttrain's l2: 5.21671e+09\tvalid's l2: 4.61808e+09\n[900]\ttrain's l2: 5.17196e+09\tvalid's l2: 4.61769e+09\nDid not meet early stopping. Best iteration is:\n[950]\ttrain's l2: 5.15832e+09\tvalid's l2: 4.61639e+09\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 4.94161e+09\tvalid's l2: 4.63096e+09\n[300]\ttrain's l2: 4.5442e+09\tvalid's l2: 4.62784e+09\nEarly stopping, best iteration is:\n[238]\ttrain's l2: 4.68968e+09\tvalid's l2: 4.6215e+09\nLGBM Fold RMSE: 67873.89088658827\n0:\tlearn: 79406.1723124\ttest: 74109.3777930\tbest: 74109.3777930 (0)\ttotal: 6.15s\tremaining: 1h 42m 22s\n300:\tlearn: 66725.4956248\ttest: 68192.8353036\tbest: 68048.4021157 (140)\ttotal: 19.2s\tremaining: 44.6s\nbestTest = 68048.40212\nbestIteration = 140\nShrink model to first 141 iterations.\nCAT Fold RMSE: 68048.40255571465\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 5.44688e+09\tvalid's l2: 4.76724e+09\n[300]\ttrain's l2: 5.34854e+09\tvalid's l2: 4.73639e+09\n[450]\ttrain's l2: 5.28354e+09\tvalid's l2: 4.73194e+09\n[600]\ttrain's l2: 5.22845e+09\tvalid's l2: 4.73312e+09\nEarly stopping, best iteration is:\n[469]\ttrain's l2: 5.27562e+09\tvalid's l2: 4.73131e+09\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 4.90399e+09\tvalid's l2: 4.73797e+09\n[300]\ttrain's l2: 4.49765e+09\tvalid's l2: 4.75992e+09\nEarly stopping, best iteration is:\n[153]\ttrain's l2: 4.8952e+09\tvalid's l2: 4.73773e+09\nLGBM Fold RMSE: 68741.3412316308\n0:\tlearn: 79373.1756073\ttest: 74447.6691425\tbest: 74447.6691425 (0)\ttotal: 56.6ms\tremaining: 56.5s\nbestTest = 68696.30985\nbestIteration = 95\nShrink model to first 96 iterations.\nCAT Fold RMSE: 68696.31560781486\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 5.27954e+09\tvalid's l2: 5.48956e+09\n[300]\ttrain's l2: 5.18422e+09\tvalid's l2: 5.45275e+09\n[450]\ttrain's l2: 5.12385e+09\tvalid's l2: 5.44812e+09\n[600]\ttrain's l2: 5.07117e+09\tvalid's l2: 5.44622e+09\n[750]\ttrain's l2: 5.0257e+09\tvalid's l2: 5.44719e+09\nEarly stopping, best iteration is:\n[656]\ttrain's l2: 5.05357e+09\tvalid's l2: 5.44598e+09\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 4.7566e+09\tvalid's l2: 5.45589e+09\n[300]\ttrain's l2: 4.37508e+09\tvalid's l2: 5.46176e+09\nEarly stopping, best iteration is:\n[194]\ttrain's l2: 4.63143e+09\tvalid's l2: 5.44936e+09\nLGBM Fold RMSE: 73732.31329730435\n0:\tlearn: 78205.5384902\ttest: 79215.5268480\tbest: 79215.5268480 (0)\ttotal: 27.4ms\tremaining: 27.4s\n300:\tlearn: 66009.6736289\ttest: 73940.9966222\tbest: 73855.6650492 (191)\ttotal: 12.8s\tremaining: 29.7s\nbestTest = 73855.66505\nbestIteration = 191\nShrink model to first 192 iterations.\nCAT Fold RMSE: 73855.66349238947\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 5.17546e+09\tvalid's l2: 5.91301e+09\n[300]\ttrain's l2: 5.08926e+09\tvalid's l2: 5.86286e+09\n[450]\ttrain's l2: 5.03208e+09\tvalid's l2: 5.84856e+09\n[600]\ttrain's l2: 4.98359e+09\tvalid's l2: 5.84279e+09\n[750]\ttrain's l2: 4.94117e+09\tvalid's l2: 5.83891e+09\n[900]\ttrain's l2: 4.89735e+09\tvalid's l2: 5.83762e+09\nDid not meet early stopping. Best iteration is:\n[886]\ttrain's l2: 4.90188e+09\tvalid's l2: 5.83721e+09\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 4.68164e+09\tvalid's l2: 5.8571e+09\n[300]\ttrain's l2: 4.31535e+09\tvalid's l2: 5.86772e+09\nEarly stopping, best iteration is:\n[170]\ttrain's l2: 4.62455e+09\tvalid's l2: 5.85365e+09\nLGBM Fold RMSE: 76388.25540010248\n0:\tlearn: 77432.6686682\ttest: 82042.3698353\tbest: 82042.3698353 (0)\ttotal: 55.8ms\tremaining: 55.8s\n300:\tlearn: 65085.4314832\ttest: 76627.2038810\tbest: 76505.7193371 (106)\ttotal: 12.9s\tremaining: 30s\nbestTest = 76505.71934\nbestIteration = 106\nShrink model to first 107 iterations.\nCAT Fold RMSE: 76505.71430048044\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 5.17309e+09\tvalid's l2: 5.90075e+09\n[300]\ttrain's l2: 5.08024e+09\tvalid's l2: 5.86188e+09\n[450]\ttrain's l2: 5.01551e+09\tvalid's l2: 5.85245e+09\n[600]\ttrain's l2: 4.96042e+09\tvalid's l2: 5.84869e+09\n[750]\ttrain's l2: 4.91301e+09\tvalid's l2: 5.84996e+09\nEarly stopping, best iteration is:\n[641]\ttrain's l2: 4.94761e+09\tvalid's l2: 5.84783e+09\nTraining until validation scores don't improve for 200 rounds\n[150]\ttrain's l2: 4.66122e+09\tvalid's l2: 5.85056e+09\n[300]\ttrain's l2: 4.27612e+09\tvalid's l2: 5.85035e+09\nEarly stopping, best iteration is:\n[197]\ttrain's l2: 4.52687e+09\tvalid's l2: 5.84316e+09\nLGBM Fold RMSE: 76394.86852684047\n0:\tlearn: 77494.4093645\ttest: 81804.0967807\tbest: 81804.0967807 (0)\ttotal: 50ms\tremaining: 50s\n300:\tlearn: 65294.3669604\ttest: 76347.9724982\tbest: 76239.0792492 (126)\ttotal: 12.7s\tremaining: 29.5s\nbestTest = 76239.07925\nbestIteration = 126\nShrink model to first 127 iterations.\nCAT Fold RMSE: 76239.07763655737\nMean LGBM RMSE: 72626.13386849329\nMean CAT RMSE: 72669.03471859137\n","output_type":"stream"}]},{"cell_type":"code","source":"LGBM_preds = np.zeros(len(test_df))\nfor model in LGBM_model:\n    LGBM_preds += model.predict(test_df) / len(LGBM_model)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:32:21.501094Z","iopub.execute_input":"2024-09-26T09:32:21.501550Z","iopub.status.idle":"2024-09-26T09:32:52.166926Z","shell.execute_reply.started":"2024-09-26T09:32:21.501500Z","shell.execute_reply":"2024-09-26T09:32:52.166042Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"CAT_preds = np.zeros(len(test_df))\nfor model in CAT_model:\n    CAT_preds += model.predict(test_df) / len(CAT_model)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:32:52.168306Z","iopub.execute_input":"2024-09-26T09:32:52.168892Z","iopub.status.idle":"2024-09-26T09:32:55.123020Z","shell.execute_reply.started":"2024-09-26T09:32:52.168852Z","shell.execute_reply":"2024-09-26T09:32:55.121939Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"test_preds = LGBM_preds * 0.8 + CAT_preds * 0.2\n","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:32:55.124229Z","iopub.execute_input":"2024-09-26T09:32:55.124546Z","iopub.status.idle":"2024-09-26T09:32:55.129396Z","shell.execute_reply.started":"2024-09-26T09:32:55.124513Z","shell.execute_reply":"2024-09-26T09:32:55.128421Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"#sample_sub['price'] = (0.9 * test_preds + 0.1 * sub_1['price']) * 0.4 + 0.6 * sub_2['price']\nsample_sub['price'] = test_preds\nsample_sub.to_csv(\"submission.csv\", index=False)\nsample_sub.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-26T09:32:55.130916Z","iopub.execute_input":"2024-09-26T09:32:55.131250Z","iopub.status.idle":"2024-09-26T09:32:55.492936Z","shell.execute_reply.started":"2024-09-26T09:32:55.131217Z","shell.execute_reply":"2024-09-26T09:32:55.491999Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"       id     price\n0  188533  19685.49\n1  188534  69709.37\n2  188535  53404.75\n3  188536  24328.01\n4  188537  30706.19","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>188533</td>\n      <td>19685.49</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>188534</td>\n      <td>69709.37</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>188535</td>\n      <td>53404.75</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>188536</td>\n      <td>24328.01</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>188537</td>\n      <td>30706.19</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]}]}